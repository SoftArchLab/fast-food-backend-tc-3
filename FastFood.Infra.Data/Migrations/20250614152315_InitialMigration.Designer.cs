// <auto-generated />
using System;
using FastFood.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastFood.Infra.Data.Migrations
{
    [DbContext(typeof(FastFoodDbContext))]
    [Migration("20250614152315_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FastFood.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsFinished")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsFinished");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Subtotal");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("tb_cart", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsFinished = false,
                            Subtotal = 25.00m,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("tb_cart_item", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            CartId = 1,
                            ProductId = 2,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("tb_category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lanche"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Acompanhamento"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bebida"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sobremesa"
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CompletionDate");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("OrderStatusId");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PayemntId");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Total");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderStatusId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("tb_order", (string)null);
                });

            modelBuilder.Entity("FastFood.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OrderStatus");

                    b.HasKey("Id");

                    b.ToTable("tb_order_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Received"
                        },
                        new
                        {
                            Id = 2,
                            Name = "InPreparation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ready"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Finished"
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Method");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("PaymentDate");

                    b.Property<long?>("PaymentIdMP")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("PaymentIdMP");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Price");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("PaymentStatusId")
                        .IsUnique();

                    b.ToTable("tb_payment", (string)null);
                });

            modelBuilder.Entity("FastFood.Domain.Entities.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PaymentStatus");

                    b.HasKey("Id");

                    b.ToTable("tb_payment_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "InProcess"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Approved"
                        },
                        new
                        {
                            Id = 4,
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            Id = 5,
                            StatusName = "Rejected"
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("tb_product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Pão, carne, queijo, alface e tomate",
                            IsActive = false,
                            Name = "X-Burguer",
                            Price = 15.00m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Batata frita crocante",
                            IsActive = false,
                            Name = "Batata Frita",
                            Price = 10.00m,
                            StockQuantity = 50
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("UserRole");

                    b.Property<string>("TaxId")
                        .HasColumnType("longtext")
                        .HasColumnName("TaxId");

                    b.HasKey("Id");

                    b.ToTable("tb_user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("27cd36a3-816a-4a0e-9dab-5893908769fa"),
                            Email = "admin@email.com",
                            Name = "admin",
                            Password = "admin",
                            Role = 0,
                            TaxId = "99999999999"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Email = "customer@email.com",
                            Name = "customer",
                            Password = "customer",
                            Role = 1,
                            TaxId = "88888888888"
                        });
                });

            modelBuilder.Entity("FastFood.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Order", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.OrderStatus", "Status")
                        .WithOne("Order")
                        .HasForeignKey("FastFood.Domain.Entities.Order", "OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Payment", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("FastFood.Domain.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFood.Domain.Entities.PaymentStatus", "PaymentStatus")
                        .WithOne("Payment")
                        .HasForeignKey("FastFood.Domain.Entities.Payment", "PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentStatus");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Product", b =>
                {
                    b.HasOne("FastFood.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FastFood.Domain.Entities.Order", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("FastFood.Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("FastFood.Domain.Entities.PaymentStatus", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
