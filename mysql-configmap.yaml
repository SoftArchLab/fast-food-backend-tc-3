apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-config
  namespace: fastfood-db
data:
  init.sql: |
    CREATE TABLE __EFMigrationsHistory (
      MigrationId VARCHAR(150) NOT NULL,
      ProductVersion VARCHAR(32) NOT NULL,
      PRIMARY KEY (MigrationId)
    );

    CREATE TABLE tb_category (
      Id INT AUTO_INCREMENT PRIMARY KEY,
      Name VARCHAR(50) NOT NULL
    );

    CREATE TABLE tb_product (
      Id INT AUTO_INCREMENT PRIMARY KEY,
      Name VARCHAR(50) NOT NULL,
      Description VARCHAR(200) NOT NULL,
      Price DECIMAL(18,2) NOT NULL,
      StockQuantity INT NOT NULL,
      IsActive TINYINT(1) NOT NULL DEFAULT 1,
      CategoryId INT NOT NULL,
      FOREIGN KEY (CategoryId) REFERENCES tb_category(Id) ON DELETE CASCADE
    );

    CREATE TABLE tb_user (
      Id CHAR(36) NOT NULL,
      Name VARCHAR(150) NOT NULL,
      TaxId TEXT,
      Email VARCHAR(100),
      Password VARCHAR(150),
      UserRole INT NOT NULL,
      PRIMARY KEY (Id)
    );

    CREATE TABLE tb_payment_status (
      Id INT AUTO_INCREMENT PRIMARY KEY,
      PaymentStatus VARCHAR(50) NOT NULL
    );

    CREATE TABLE tb_order_status (
      Id INT AUTO_INCREMENT PRIMARY KEY,
      OrderStatus VARCHAR(50) NOT NULL
    );

    CREATE TABLE tb_cart (
      Id INT AUTO_INCREMENT PRIMARY KEY,
      UserId CHAR(36) NOT NULL,
      Subtotal DECIMAL(65,30) NOT NULL,
      IsFinished TINYINT(1) NOT NULL
    );

    CREATE TABLE tb_cart_item (
      Id INT AUTO_INCREMENT PRIMARY KEY,
      Quantity INT NOT NULL,
      ProductId INT NOT NULL,
      CartId INT NOT NULL,
      FOREIGN KEY (CartId) REFERENCES tb_cart(Id) ON DELETE CASCADE,
      FOREIGN KEY (ProductId) REFERENCES tb_product(Id) ON DELETE RESTRICT
    );

    CREATE TABLE tb_order (
      Id INT AUTO_INCREMENT PRIMARY KEY,
      UserId CHAR(36) NOT NULL,
      CartId INT NOT NULL,
      PaymentId INT NOT NULL,
      Total DECIMAL(65,30) NOT NULL,
      CreatedDate DATETIME(6) NOT NULL,
      CompletionDate DATETIME(6),
      OrderStatusId INT NOT NULL,
      FOREIGN KEY (CartId) REFERENCES tb_cart(Id) ON DELETE CASCADE,
      FOREIGN KEY (OrderStatusId) REFERENCES tb_order_status(Id) ON DELETE CASCADE,
      FOREIGN KEY (UserId) REFERENCES tb_user(Id) ON DELETE CASCADE
    );

    CREATE TABLE tb_payment (
      Id INT AUTO_INCREMENT PRIMARY KEY,
      PaymentIdMP BIGINT NOT NULL,
      Price TEXT NOT NULL,
      Method TEXT NOT NULL,
      PaymentDate DATETIME(6) NOT NULL,
      OrderId INT NOT NULL UNIQUE,
      PaymentStatusId INT NOT NULL,
      FOREIGN KEY (OrderId) REFERENCES tb_order(Id) ON DELETE CASCADE,
      FOREIGN KEY (PaymentStatusId) REFERENCES tb_payment_status(Id) ON DELETE CASCADE
    );

    INSERT INTO tb_user (Id, Email, Name, Password, UserRole, TaxId) VALUES
    ('11111111-1111-1111-1111-111111111111', 'customer@email.com', 'customer', 'customer', 1, '88888888888')
    ON DUPLICATE KEY UPDATE
        Email=VALUES(Email),
        Name=VALUES(Name),
        Password=VALUES(Password),
        UserRole=VALUES(UserRole),
        TaxId=VALUES(TaxId);

    INSERT INTO tb_user (Id, Email, Name, Password, UserRole, TaxId) VALUES
    ('d52947e6-2001-4a63-9377-b645568f59b5', 'admin@email.com', 'admin', 'admin', 0, '99999999999')
    ON DUPLICATE KEY UPDATE
        Email=VALUES(Email),
        Name=VALUES(Name),
        Password=VALUES(Password),
        UserRole=VALUES(UserRole),
        TaxId=VALUES(TaxId);

    INSERT INTO tb_category (Id, Name) VALUES
    (1, 'Lanche')
    ON DUPLICATE KEY UPDATE
        Name=VALUES(Name);

    INSERT INTO tb_category (Id, Name) VALUES
    (2, 'Acompanhamento')
    ON DUPLICATE KEY UPDATE
        Name=VALUES(Name);

    INSERT INTO tb_category (Id, Name) VALUES
    (3, 'Bebida')
    ON DUPLICATE KEY UPDATE
        Name=VALUES(Name);

    INSERT INTO tb_category (Id, Name) VALUES
    (4, 'Sobremesa')
    ON DUPLICATE KEY UPDATE
        Name=VALUES(Name);

    INSERT INTO tb_order_status (Id, OrderStatus)
    VALUES(1, 'Received')
    ON DUPLICATE KEY UPDATE
        OrderStatus=VALUES(OrderStatus);

    INSERT INTO tb_order_status (Id, OrderStatus)
    VALUES(2, 'InPreparation')
    ON DUPLICATE KEY UPDATE
        OrderStatus=VALUES(OrderStatus);

    INSERT INTO tb_order_status (Id, OrderStatus)
    VALUES(3, 'Ready')
    ON DUPLICATE KEY UPDATE
        OrderStatus=VALUES(OrderStatus);

    INSERT INTO tb_order_status (Id, OrderStatus)
    VALUES(4, 'Finished')
    ON DUPLICATE KEY UPDATE
        OrderStatus=VALUES(OrderStatus);

    INSERT INTO tb_payment_status (Id, PaymentStatus)
    VALUES(1, 'Pending')
    ON DUPLICATE KEY UPDATE
        PaymentStatus=VALUES(PaymentStatus);

    INSERT INTO tb_payment_status (Id, PaymentStatus)
    VALUES(2, 'InProcess')
    ON DUPLICATE KEY UPDATE
        PaymentStatus=VALUES(PaymentStatus);

    INSERT INTO tb_payment_status (Id, PaymentStatus)
    VALUES(3, 'Approved')
    ON DUPLICATE KEY UPDATE
        PaymentStatus=VALUES(PaymentStatus);

    INSERT INTO tb_payment_status (Id, PaymentStatus)
    VALUES(4, 'Cancelled')
    ON DUPLICATE KEY UPDATE
        PaymentStatus=VALUES(PaymentStatus);

    INSERT INTO tb_payment_status (Id, PaymentStatus)
    VALUES(5, 'Rejected')
    ON DUPLICATE KEY UPDATE
        PaymentStatus=VALUES(PaymentStatus);

    INSERT INTO tb_product (Id, CategoryId, Description, Name, Price, StockQuantity) VALUES
    (1, 1, 'Pão, carne, queijo, alface e tomate', 'X-Burguer', 15, 100)
    ON DUPLICATE KEY UPDATE
        CategoryId=VALUES(CategoryId),
        Description=VALUES(Description),
        Name=VALUES(Name),
        Price=VALUES(Price),
        StockQuantity=VALUES(StockQuantity);

    INSERT INTO tb_product (Id, CategoryId, Description, Name, Price, StockQuantity) VALUES
    (2, 2, 'Batata frita crocante', 'Batata Frita', 10, 50)
    ON DUPLICATE KEY UPDATE
        CategoryId=VALUES(CategoryId),
        Description=VALUES(Description),
        Name=VALUES(Name),
        Price=VALUES(Price),
        StockQuantity=VALUES(StockQuantity);

    INSERT INTO tb_cart (Id, SubTotal, UserId, IsFinished) VALUES
    (1, 25, '11111111-1111-1111-1111-111111111111', 0)
    ON DUPLICATE KEY UPDATE
        SubTotal=VALUES(SubTotal),
        UserId=VALUES(UserId),
        IsFinished=VALUES(IsFinished);

    INSERT INTO tb_cart_item (Id, CartId, ProductId, Quantity) VALUES
    (1, 1, 1, 1),
    (2, 1, 2, 1)
    ON DUPLICATE KEY UPDATE
        CartId=VALUES(CartId),
        ProductId=VALUES(ProductId),
        Quantity=VALUES(Quantity);

    INSERT INTO tb_order(Id, UserId, CartId, PaymentId, Total, CreatedDate, CompletionDate, OrderStatusId)
    VALUES(1, '11111111-1111-1111-1111-111111111111', 1, 1, 0, '2025-06-01 22:00:00', '2025-06-01 22:00:00', 1)
    ON DUPLICATE KEY UPDATE
        UserId=VALUES(UserId),
        CartId=VALUES(CartId),
        PaymentId=VALUES(PaymentId),
        Total=VALUES(Total),
        CreatedDate=VALUES(CreatedDate),
        CompletionDate=VALUES(CompletionDate),
        OrderStatusId=VALUES(OrderStatusId);

    INSERT INTO tb_payment(Id, `Method`, PaymentDate, OrderId, PaymentStatusId, PaymentIdMP, Price)
    VALUES(1, 'PIX', '2025-06-02 21:00:00', 1, 1, 1, 15.0)
    ON DUPLICATE KEY UPDATE
        Method=VALUES(Method),
        PaymentDate=VALUES(PaymentDate),
        OrderId=VALUES(OrderId),
        PaymentStatusId=VALUES(PaymentStatusId),
        PaymentIdMP=VALUES(PaymentIdMP), 
        Price=VALUES(Price);  